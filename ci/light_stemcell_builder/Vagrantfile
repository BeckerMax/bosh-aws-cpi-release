# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

cfg = JSON.parse(File.read(ENV.fetch('VAGRANT_CONFIG_FILE')))
vm_user = cfg.fetch('VM_USER')

Vagrant.configure(2) do |config|
  config.vm.box = 'dummy'

  config.vm.provider :aws do |aws, override|
    aws.instance_type = 'm3.xlarge'
    aws.instance_ready_timeout = 600

    aws.region = cfg.fetch('AWS_DEFAULT_REGION')
    aws.endpoint = cfg.fetch('AWS_ENDPOINT')
    aws.access_key_id = cfg.fetch('AWS_ACCESS_KEY_ID')
    aws.secret_access_key = cfg.fetch('AWS_SECRET_ACCESS_KEY')

    aws.tags = { 'Name' => cfg.fetch('VM_NAME') }
    aws.keypair_name = cfg.fetch('VM_KEYPAIR_NAME')
    aws.ami = cfg.fetch('VM_AMI')

    aws.associate_public_ip = true
    aws.subnet_id = cfg.fetch('AWS_SUBNET_ID')
    aws.security_groups = [cfg.fetch('AWS_SECURITY_GROUP')]

    override.ssh.username = vm_user
    override.ssh.private_key_path = cfg.fetch('VM_PRIVATE_KEY_FILE')
    override.nfs.functional = false

    aws.user_data = "#!/bin/bash\nsed -i -e 's/^Defaults.*requiretty/# Defaults requiretty/g' /etc/sudoers"
  end

  config.vm.provision :shell do |shell|
    shell.privileged = true
    shell.inline = <<-BASH
      set -x -e
      mkdir -p /mnt/tmp
      chown -R #{vm_user}:#{vm_user} /mnt/tmp
      echo 'export TMPDIR=/mnt/tmp' > /home/#{vm_user}/.profile
      mkdir -p /mnt/stemcells
      chown -R #{vm_user}:#{vm_user} /mnt/stemcells
      mkdir -p /bosh/tmp

      apt-get update; apt-get -y upgrade; apt-get clean

      apt-get install -y git curl wget tar make unzip gcc; apt-get clean

      apt-get install -y ruby ruby-dev; apt-get clean

      apt-get install -y libxslt-dev libxml2-dev zlib1g-dev g++; apt-get clean

      apt-get install -y sqlite3 libsqlite3-dev; apt-get clean

      apt-get install -y mysql-client libmysqlclient-dev; apt-get clean

      apt-get install -y postgresql postgresql-client libpq-dev; apt-get clean

      mkdir -p /home/#{vm_user}/bin
      echo 'export PATH=/home/#{vm_user}/bin:${PATH}' >> /home/#{vm_user}/.profile
      cp /vagrant/#{cfg.fetch('STEMCELL_COPY_FILE')} /home/#{vm_user}/bin/
      chown -R #{vm_user}:#{vm_user} /home/#{vm_user}/bin

      chown -R #{vm_user}:#{vm_user} /bosh
    BASH
  end

  config.vm.provision :shell do |shell|
    shell.privileged = false
    shell.inline = <<-BASH
      ( cd /bosh && bundle install --local )

    BASH
  end

  config.vm.synced_folder cfg.fetch('BOSH_SRC_PATH'), '/bosh', rysnc__verbose: true, rsync__args: ["--verbose", "--archive", "--delete", "-z"]
end
